<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Floating Chatbot</title>
    <style>
        /* Floating chatbot styling */
        #chatbot {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 300px;
            height: 400px;
            border-radius: 15px;
            background-color: white;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
            display: none;
            flex-direction: column;
            justify-content: space-between;
        }

        #chatbot-header {
            background-color: #007bff;
            color: white;
            padding: 10px;
            text-align: center;
            border-top-left-radius: 15px;
            border-top-right-radius: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        /* Chatbot close button in header */
        #chatbot-header button {
            background: none;
            border: none;
            color: white;
            font-size: 16px;
            cursor: pointer;
        }

        #chatbot-messages {
            height: 320px;
            overflow-y: auto;
            padding: 10px;
            border-bottom: 1px solid #ddd;
        }

        #chatbot-input {
            display: flex;
            padding: 10px;
            align-items: center;
        }

        #chatbot-input input {
            flex: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 14px;
        }

        #chatbot-input button {
            margin-left: 10px;
            padding: 10px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
        }

        /* Chatbot Toggle Button (Icon) */
        #chatbot-toggle {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 60px;
            height: 60px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            font-size: 30px;
            display: flex;
            justify-content: center;
            align-items: center;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        }

        /* Messages Styling */
        .message {
            margin: 5px 0;
        }

        .message strong {
            color: #007bff;
        }

        .message.bot strong {
            color: #ff7f50;
        }
    </style>
</head>
<body>
    <!-- Toggle Button for Chatbot -->
    <button id="chatbot-toggle">&#128172;</button>

    <!-- Chatbot Container -->
    <div id="chatbot">
        <div id="chatbot-header">
            Gemini Chatbot
            <button id="close-chatbot">&times;</button>
        </div>
        <div id="chatbot-messages"></div>
        <div id="chatbot-input">
            <input type="text" id="user-input" placeholder="Type your message...">
            <button id="send-message">Send</button>
        </div>
    </div>

    <script>
        // import axios from 'axios';
        // Toggle Chatbot visibility
        const chatbotToggle = document.getElementById('chatbot-toggle');
        const chatbot = document.getElementById('chatbot');
        const closeChatbotButton = document.getElementById('close-chatbot');

        chatbotToggle.addEventListener('click', () => {
            chatbot.style.display = 'flex';  // Show chatbot
            chatbotToggle.style.display = 'none';  // Hide the toggle button
        });

        closeChatbotButton.addEventListener('click', () => {
            chatbot.style.display = 'none';  // Hide chatbot
            chatbotToggle.style.display = 'flex';  // Show the toggle button (icon)
        });

        // Send Message to Chatbot (Gemini API)
        const sendMessageButton = document.getElementById('send-message');
        console.log(sendMessageButton)
        

        const messagesContainer = document.getElementById('chatbot-messages');
        const userInput = document.getElementById('user-input');
        console.log(userInput.value)

        sendMessageButton.addEventListener('click', async () => {
            const userMessage = userInput.value;
            console.log(userMessage)
            if (userMessage.trim()) {
                addMessage('User', userMessage, 'user');
                userInput.value = '';  // Clear input
                try {
                    const geminiRes = await axios.post('http://127.0.0.1:7000/gemini', {
                        sentence: userMessage
                    });
                    let ans = geminiRes.data.new_sentence
                    console.log(ans);
                } catch (error) {
                    console.error('Error:', error);
                }
                // try {
                //     const botResponse = await fetch('/chatbot', {
                //         method: 'POST',
                //         headers: {
                //             'Content-Type': 'application/json'
                //         },
                //         body: JSON.stringify({ message: userMessage })
                //     });
                //     const data = await botResponse.json();
                //     let gresponse = data.response.new_sentence
                //     console.log(gresponse)
                //     addMessage('Bot', data.response, 'bot');
                // } catch (error) {
                //     addMessage('Bot', 'Sorry, something went wrong.', 'bot');
                // }
            }
        });

        // Function to add a message to the chat
        function addMessage(sender, message, senderClass) {
            const messageElement = document.createElement('div');
            messageElement.className = `message ${senderClass}`;
            messageElement.innerHTML = `<strong>${sender}:</strong> ${message}`;
            messagesContainer.appendChild(messageElement);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;  // Scroll to bottom
        }
    </script>
</body>
</html>
